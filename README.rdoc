This is a Finance Tracker App. The aim of this project is: rapid prototyping. 
This will be mobile-responsive too.

Q) Why do we need a stocks model or stocks.rb?
A) In this app every user has a collection of stocks tha he/she tracks. So there is a need for a stocks table in the database and a corresponding stocks model with a :user_id foreign key. Hence, it will be one-many relation. But a better design will be many-many, as the same stock can be tracked by different users. These two tables have to be joined by a joining table.

Q) Why do we need route to search_stocks?
A) In each users signed in user's portfolio page, we need to provide a form that will look up a stock from the Yahoo API(stock_quote gem). What should happen when that lookup-stock button is pressed? A controller action will look for the stock in the database, and if not present look for the stock by the stock_quote gem. 
..........
Todo
..........

Q) What does the <% if @stock %> block do in the lookup form? 
A) The Process goes like this: 
signedin-user/my_portfolio ---> render 'stocks/lookup' (@stock = nil here) ---> submit form to route search_stocks_path via :get ---> so upon pressing the lookup button the url will be /search_stocks?AAPL ---> invokes the stocks#search action ---> Looks up stock in the database and if not present then via Yahoo Api ---> @stock will be Stock Object or nil ---> if @stock then render 'lookup' again ---> renders the ajax form, but this time @stocks is not nil but AAPL, that shows in the <% if @stock %> 

Q) Why did we use form_tag instead of form_for in the lookup partial?
A) When we a Model, a corresponding database table, and a form is going to be built for that model, we use form_for. A model is passed to that form_for and a form is built easily and submitted by post method.    

Q) In text_field_tag(name, value, options), "value" attribute was set to stock[:params] in lookup.html.erb ?
A) The route search_stocks_path & value params[:stock] is same as /search_stocks?stock=AAPL
In /search_stocks?AAPL, params[:stock] is {stock: "AAPL"}. 
Hence, the first time lookup is rendered, params[:stock] is nil, hence form is blank. 
However, if AAPL is searched, params[:stock] = "AAPL". Hence the input field will show the last search.

Q) Why does the ajax request doesn't work without a stocks.js file? In other words, where the pipeline is broken in the request-response cycle?
A) Whenever any view(html) is rendered, the browser looks for any associated css and javascript files. 
So the javascript files will be rendered for any view not just for the _lookup partial. 
In the final step, rails sends the browser the required html to be rendered, all the css files and all the javascript files in the development mode. 
In the production mode, however, all the css and javascript files are compiled into one application.css and
application.js file. 

Q) Why do we need a stocks.js file and who calls for it? And why the name stocks.js ? 
And how does _lookup.html.erb know that it should use stocks.js? 
A) It doesn't matter what the name of the "stocks.js" file is. It could have been anything.js and still the code would have worked. That's because, in production all the .js files are compiled into one application.js file. So ultimately all javascripts files are served as app/assets/javascripts/application.js

Q) In the stocks.js file, the function(event, data, status), what is data? Doing a console.log shows that data is the entire html generated by _lookup.html.erb. How?
A) 

Q) In the routes we did: "resources: user_stocks, except: [:edit, :update :destroy]". Why was :index action not excluded? Where will we require it? When a user's stocks are displayed in the my_portfolio page, which controller#action will be called?
A) 

Q) Why full_name method was added to User Model? Maybe we will need it later.
A) 

In the Devise documentation, all the additional fields like username are configurable in the Application Controller. But a better way is to  make a class RegistrationsController < Devise::RegistrationsController.
And then specify this in the routes file: devise_for :users, controller: {registrations: "user/registrations"} 
